/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.2                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.01;

vertices
(
    (-1 -0.5 -0.05)
    (1 -0.5 -0.05)
    (-1 -0.25 -0.05)
    (1 -0.25 -0.05)
    (-1 0.1 -0.05)
    (1 0.1 -0.05)
    (-1 0.5 -0.05)
    (1 0.5 -0.05)

    (-1 -0.5 0.05)
    (1 -0.5 0.05)
    (-1 -0.25 0.05)
    (1 -0.25 0.05)
    (-1 0.1 0.05)
    (1 0.1 0.05)
    (-1 0.5 0.05)
    (1 0.5 0.05)

    (-1 0 -0.05)
    (1 0 -0.05)
    (-1 0 0.05)
    (1 0 0.05)


);

edges
(
     arc 4 5 (0 0.05 -0.05)
     arc 12 13 (0 0.05 0.05)
);

blocks
(
    hex 8(0 1 3 2 8 9 11 10) corticalBone (100 12 1) simpleGrading (1 1 1)
    hex 8(2 3 17 16 10 11 19 18) titanium (100 12 1) simpleGrading (1 1 1)
    hex 8(4 5 7 6 12 13 15 14) UHMWPE (100 25 1) simpleGrading (1 1 1)
);

boundary
(
    topBrickDown
    {
        type patch;
        faces
        (
        (4 5 13 12)
        );
    }
    topBrickUp
    {
        type patch;
        faces
        (
        (6 14 15 7)
        );
    }
    bottomBrickDown
    {
        type patch;
        faces
        (
        (0 1 9 8)
        );
    }

    bottomBrickUp
    {
        type patch;
        faces
        (
        (16 18 19 17)
        );
    }

    bottomBrickLeft
    {
        type patch;
        faces
        (
        (0 8 10 2)
        (2 10 18 16)
        );
    }

    bottomBrickRight
    {
        type patch;
        faces
        (
        (1 3 11 9)
        (3 17 19 11)
        );
    }

    topBrickLeft
    {
        type patch;
        faces
        (
        (4 12 14 6)
        );
    }

    topBrickRight
    {
        type patch;
        faces
        (
        (5 7 15 13)
        );
    }

    frontAndBack
    {
        type empty;
        faces
        (
        (0 2 3 1)
        (2 16 17 3)
        (4 6 7 5)
        
        (8 9 11 10)
        (10 11 19 18)
        (12 13 15 14)
        );
    }
);

mergePatchPairs
(
);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// ************************************************************************* //

